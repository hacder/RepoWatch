** Submenu text does not grow when you commit, bringing the latest commit to today.

Topic Branches
--------------
	Assumptions: Never edit master. Never. When we go to commit, if we had master checked out, we should actually
	offer to commit to a topic branch instead, or to make a new topic branch. Ideally, we create a new topic branch,
	focus on just that one, then we have the ability to mark a topic branch as done (graduate to next level), or
	abandon it.
	
	The real questions becomes: how do we switch between branches? The super-simple answer is that we cannot. You
	must finish working on this branch before you create a new one. In the real world that just is not acceptable,
	even for super simple users who aren't using branches now. It makes starting a branch a very risky operation.
	
	Switching branches becomes a secondary operation. At any point we no longer know exactly what the user should
	do next, so one magic key press no longer becomes possible. Do we do multiple hotkeys, or maybe we bring
	up a more complicated dialog that allows us to do what we would have done before AND switch branches?

Done:
	* Make diff show new files as well as modified ones.
	* Ultra ultra basics of project time tracking.
	* Colorize diffs
	* Build file list when looking at local diffs
	* Fix onofftimes. Seems to lose info after a restart.
	* Does not seem to notice updates after the initial start. At least on git.
	* Make a wordpress-like callback-heavy "action" model so that I can do
	  things like make the time tracker be its own class that just subscribes
	  to events and does its own thing. Also make the "filter" model work
	  so that the timer plugin can affect the title of the project.

* Make file list show up in table when looking at local diffs
* Make files in Diff class actually be represented by FileDiff.
* Continue settling on more sane per-repository set of code.
* Startup time is very very poor. Why?
	* Seems to be network related. Killing the network obviously kills some features,
	  but also makes it load very quickly.

Future Features
---------------

1. Handle Branching
2. Handle Stashes and Unstashes
3. Plugin To Do Whatever
4. Startup Configuration Screen
5. Handle huge repository numbers gracefully (start using a time delay in the scanner as we find more
   and more repositories. this should make the initial HIGH cpu spike ease off)
6. Handle no git and no mercurial gracefully.
7. Look into github or the mercurial equivalent for some sort of project suggestion feature.

Preferences:
	* Auto-scan or not
	* Green or clear bubble
	* Extra menu text or not
	* Time tracking delay before not working anymore.


Current work flow																Git					Mercurial
	* checkLocal: (NSTimer *)
		Used to get initial local diffs and periodically to get					buggy				untested
		updates about what has changed.
	* setupUpstream
		Used once at repository creation to detect if there even				done				done
		IS an upstream for us to worry about
	* setLocalMod: (BOOL)
		Used for our basic local modification flag AND to log transition		done				done
		times for our incredibly basic time tracking program.